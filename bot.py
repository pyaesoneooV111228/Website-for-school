import requests
from collections import defaultdict
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
)
import os

TOKEN = os.getenv("8168731909:AAFYSK9K8jwXTmp3oy2ZNb07p71DnjFS4a0")  # Or put your bot token here as a string
# TOKEN = "YOUR_BOT_TOKEN"

# Your Telegram user IDs allowed as admins (put your ID here)
ADMINS = {5806725502}

# Store valid login codes generated by admin commands
valid_login_codes = set()

# Authenticated users {user_id: login_code}
authenticated_users = dict()

# Cache for definitions per user
cache = defaultdict(dict)
# User query stats
user_stats = defaultdict(int)

SUPPORTED_LANGS = {
    "en": "English",
    "es": "Spanish",
    "fr": "French",
    "de": "German",
    "it": "Italian",
    "pt": "Portuguese",
}

TRANSLATE_API_URL = "https://libretranslate.de/translate"

def is_admin(user_id):
    return user_id in ADMINS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    if args:
        code = args[0].strip()
        if code in valid_login_codes:
            authenticated_users[user_id] = code
            await update.message.reply_text(
                f"‚úÖ Successfully logged in with code: {code}\n"
                "You can now use the bot‚Äôs features.\n"
                "Type /help to get started."
            )
            return
        else:
            await update.message.reply_text(
                "‚ùå Invalid login code.\n"
                "Please use the correct login link."
            )
            return

    if user_id in authenticated_users:
        await update.message.reply_text(
            "You are already logged in!\nUse /help to see commands."
        )
        return

    # Welcome text for new users without login
    await update.message.reply_text(
        "üëã Welcome to the bot!\n\n"
        "To get started, please log in using a special login link.\n"
        "Ask the admin (@MavericMMND_S) to send you your unique login link."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in authenticated_users:
        await update.message.reply_text("‚ùå Please log in first using your unique login link.")
        return

    await update.message.reply_text(
        "‚ÑπÔ∏è *Commands available:*\n\n"
        "/define `<word>` `[language_code]` - Get dictionary definitions with examples, synonyms, pronunciation.\n"
        "  - Language code optional, default is English.\n"
        "  - Supported languages: " + ", ".join(f"{c}({n})" for c,n in SUPPORTED_LANGS.items()) + "\n\n"
        "/translate `<text>` `<target_language_code>` - Translate text.\n"
        "/stats - Show your query count.\n"
        "/help - Show this help message.\n\n"
        "Use the pronunciation button after /define to hear audio.",
        parse_mode="Markdown"
    )

async def define(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in authenticated_users:
        await update.message.reply_text("‚ùå Please log in first using your unique login link.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå Please provide a word. Usage: /define <word> [language_code]")
        return

    word = context.args[0].lower()
    lang = context.args[1].lower() if len(context.args) > 1 else "en"

    if lang not in SUPPORTED_LANGS:
        await update.message.reply_text(
            f"‚ùå Language '{lang}' not supported.\nSupported: {', '.join(SUPPORTED_LANGS.keys())}"
        )
        return

    if word in cache[user_id]:
        await send_definition(update, cache[user_id][word], word, lang)
        user_stats[user_id] += 1
        return

    url = f"https://api.dictionaryapi.dev/api/v2/entries/{lang}/{word}"
    response = requests.get(url)

    if response.status_code != 200:
        await update.message.reply_text(f"‚ùå No definition found for '{word}' in '{lang}'.")
        return

    data = response.json()
    cache[user_id][word] = data
    user_stats[user_id] += 1

    await send_definition(update, data, word, lang)

async def send_definition(update: Update, data, word, lang):
    try:
        reply = f"üîç *{word.capitalize()}* ({SUPPORTED_LANGS.get(lang, lang)}):\n"
        phonetics = data[0].get("phonetics", [])
        audio_urls = [ph.get("audio") for ph in phonetics if ph.get("audio")]

        for meaning in data[0]["meanings"]:
            part_of_speech = meaning.get("partOfSpeech", "N/A")
            reply += f"\n*Part of Speech:* _{part_of_speech}_\n"

            for i, def_info in enumerate(meaning["definitions"], 1):
                definition = def_info.get("definition", "N/A")
                example = def_info.get("example", None)
                synonyms = def_info.get("synonyms", [])

                reply += f"{i}. {definition}\n"
                if example:
                    reply += f"   _Example:_ {example}\n"
                if synonyms:
                    reply += f"   _Synonyms:_ {', '.join(synonyms[:5])}\n"

        buttons = []
        if audio_urls:
            buttons.append([InlineKeyboardButton("üîä Play Pronunciation", callback_data=f"audio|{audio_urls[0]}")])

        await update.message.reply_text(
            reply,
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(buttons) if buttons else None
        )
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è Error processing definition. Please try another word.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("audio|"):
        audio_url = query.data.split("|")[1]
        await query.message.reply_audio(audio_url)

async def translate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in authenticated_users:
        await update.message.reply_text("‚ùå Please log in first using your unique login link.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå Usage: /translate <text> <target_language_code>")
        return

    text = " ".join(context.args[:-1])
    target_lang = context.args[-1].lower()

    payload = {
        "q": text,
        "source": "auto",
        "target": target_lang,
        "format": "text",
    }
    try:
        res = requests.post(TRANSLATE_API_URL, data=payload)
        if res.status_code == 200:
            translated = res.json().get("translatedText")
            await update.message.reply_text(f"üåê Translated:\n{translated}")
        else:
            await update.message.reply_text("‚ùå Translation service error. Try again later.")
    except Exception:
        await update.message.reply_text("‚ùå Error connecting to translation service.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in authenticated_users:
        await update.message.reply_text("‚ùå Please log in first using your unique login link.")
        return

    count = user_stats.get(user_id, 0)
    await update.message.reply_text(f"üìä You have made {count} dictionary/translation queries so far.")

# ‚Äî‚Äî‚Äî ADMIN COMMANDS ‚Äî‚Äî‚Äî

async def genlogincode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå You are not authorized to use this command.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå Usage: /genlogincode <code>")
        return

    code = context.args[0].strip()
    if code in valid_login_codes:
        await update.message.reply_text(f"‚ùå Code '{code}' already exists.")
        return

    valid_login_codes.add(code)
    await update.message.reply_text(f"‚úÖ Login code '{code}' generated and added.\n"
                                    f"Send users this link:\n"
                                    f"https://t.me/{context.bot.username}?start={code}")

async def listlogincodes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå You are not authorized to use this command.")
        return

    if not valid_login_codes:
        await update.message.reply_text("No active login codes.")
        return

    codes = "\n".join(valid_login_codes)
    await update.message.reply_text(f"üîë Active login codes:\n{codes}")

async def revokecode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå You are not authorized to use this command.")
        return

    if not context.args:
        await update.message.reply_text("‚ùå Usage: /revokecode <code>")
        return

    code = context.args[0].strip()
    if code not in valid_login_codes:
        await update.message.reply_text(f"‚ùå Code '{code}' does not exist.")
        return

    valid_login_codes.remove(code)

    # Also logout users logged in with this code
    to_remove = [uid for uid, c in authenticated_users.items() if c == code]
    for uid in to_remove:
        del authenticated_users[uid]

    await update.message.reply_text(f"‚úÖ Login code '{code}' revoked and users logged out.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("define", define))
    app.add_handler(CommandHandler("translate", translate))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_handler))

    # Admin commands
    app.add_handler(CommandHandler("genlogincode", genlogincode))
    app.add_handler(CommandHandler("listlogincodes", listlogincodes))
    app.add_handler(CommandHandler("revokecode", revokecode))

    print("Bot running...")
    app.run_polling()

if __name__ == "__main__":
    main()
